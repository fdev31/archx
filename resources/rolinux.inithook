#!/usr/bin/ash
# vim: filetype=sh

W_ROOTDIR="/run/overlay/ROOT" # rootdirs prefix for tmpfs overlay
W_WORKDIR="/run/overlay/WORK" # workdirs prefix for tmpfs overlay

## funcs:
oops() {
    echo "Error occured, continuing in 2s..."
    sleep 2
}

fatal() {
    echo "FATAL Error occured! $*"
    echo" press ENTER to reboot"
    read
    reboot -f
}

mount_squash() {
    # Mount squash (base RO filesystem)
    E_MSG="$SQUASHROOT not found in $1 !"
    orig=$1
    shift
    mount -t squashfs "$orig" "$R" $* || fatal "$E_MSG"
    [ -n "$shell" ] && echo "- squash image loaded"
}

load_kmap() {
    if [ -e "$R/usr/share/kbd/keymaps/initrd.map" ]; then
        loadkmap < "$R/usr/share/kbd/keymaps/initrd.map" || oops
        [ -n "$shell" ] && echo "- keymap"
    fi
}

run_newroot() {
    PATH="$R/bin:$PATH" LD_LIBRARY_PATH="$R/lib" $*
}

process_mountname() {
    NAME="$1"
    if [ -z "$2" ]; then
        P="$F_RWPART/ROOT"
        WP="$F_RWPART/WORK"
    else
        P="$W_ROOTDIR"
        WP="$W_WORKDIR"
    fi
    FLAT_NAME=$(echo $1 | sed 's#/#_#g')
    FLAT_NAME=${FLAT_NAME:1}
    if [ ! -d "$P/$FLAT_NAME" ]; then
        mkdir -p "$P/$FLAT_NAME"
    fi
    if [ ! -d "$WP/$FLAT_NAME" ]; then
        mkdir -p "$WP/$FLAT_NAME"
    fi
    echo $FLAT_NAME
}

dprint() {
    if [ -n "$debug" ]; then
        echo "-------------------------------------------------------------"
        echo $*
        sleep 1
    fi
}

run_latehook() {
	R="/new_root" # just a shortcut
	F_BOOT_ROOT="/fat_root" # original root, includes squashfs image

	F_RWPART="$R{{STORAGE_PATH}}"

	if [ -z "$SQUASHROOT" ] ; then
		SQUASHROOT={{ROOTIMAGE}}
	fi

	## main code:

    FULL_DISK_ID=$(cat /proc/cmdline)
	FULL_DISK_ID=${FULL_DISK_ID#*root=}
	FULL_DISK_ID=${FULL_DISK_ID%% *}
    dprint "REAL LABEL: " $FULL_DISK_ID

    LABELNAME=${FULL_DISK_ID#*=}

    dprint "LABELNAME: " $LABELNAME

    DEVICE=$(readlink -f /dev/disk/by-label/$LABELNAME)
    DEVICE=${DEVICE:0:8}

    dprint "DEVICE: " $DEVICE and "F_BOOT_ROOT: " $F_BOOT_ROOT
    mkdir "$F_BOOT_ROOT"

    mount --move "$R" "$F_BOOT_ROOT"

    if [ -e "$F_BOOT_ROOT/boot" ]; then
        F_BR="$F_BOOT_ROOT/boot"
        BOOTBOOTHACK=1
    else
        F_BR="$F_BOOT_ROOT"
    fi

    # Mount SQUASH in /

    if [ -e "$F_BOOT_ROOT/$SQUASHROOT" ]; then # squash file
        echo "Loading rootfs file"
        dprint mount_squash "$F_BOOT_ROOT/$SQUASHROOT" -o loop
        mount_squash "$F_BOOT_ROOT/$SQUASHROOT" -o loop
        if [ -z "$BOOTBOOTHACK" ]; then
            S_RW_DRIVE="/boot/rwdrive.disk"
        else
            S_RW_DRIVE="/run/bootpart/rwdrive.disk"
        fi
        RW_DRIVE="$R/$S_RW_DRIVE"
    else # squash partition
        echo "Loading rootfs partition"
        dprint mount_squash ${DEVICE}2
        mount_squash ${DEVICE}2
        RW_DRIVE=${DEVICE}3
        S_RW_DRIVE=$RW_DRIVE
    fi

    if [ -e "$F_BR/autorun" ]; then
       source "$F_BR/autorun"
    fi

    # Allow initial RW folder: run
	mount -t tmpfs tmpfs "$R/run"

    if [ -e "$F_BR/rw_drive" ]; then
        RW_DRIVE=$(cat "$F_BR/rw_drive")
    fi

    dprint "RW DRIVE/ " $RW_DRIVE

    if [ -z "$BOOTBOOTHACK" ]; then # /boot is current root, just move it
        BOOTPART="$R/boot"
        mount --move "$F_BOOT_ROOT" "$BOOTPART" || oops # make original root accessible as /boot (ro)
    else # /boot is under /boot, mount in some folder then bind
        BOOTPART="$R/run/bootpart"
        mkdir "$BOOTPART"
        mount --move "$F_BOOT_ROOT" "$BOOTPART" || oops # make original root accessible as /boot (ro)
        mount --bind "$BOOTPART/boot" "$R/boot"
    fi

    if [ "${RW_DRIVE%/*}" != "/dev" ]; then # file on disk
        echo "remount rw"
        mount "$BOOTPART" -o remount,rw
    fi

    # $R/ & $R/boot are properly setup now, proceeding with storage & co

	rmdir "$F_BOOT_ROOT" # now it's moved, we can remove original mountpoint

	load_kmap # loading kmap from it

	# default mount types
	STORED=0

	# check persistant
	if [ -z "$volatile" ] && [ -e "$RW_DRIVE" ] ; then # We have a storage device, Yey !!
        if [ -n "$wipefs" ]; then
            run_newroot mkfs.ext4 -F "$RW_DRIVE" > "/tmp/mkfs_ext4.log" 2>&1
        fi
        if [ -z "$shell" ]; then
            run_newroot btrfs check -p --repair --check-data-csum "$RW_DRIVE" > "/tmp/btrfs_check.log" 2>&1 && FS_OPTS="ssd,compress=lzo,discard,relatime"
            run_newroot fsck.ext4 -p "$RW_DRIVE" > "/tmp/ext4_check.log" 2>&1 && FS_OPTS="discard,relatime"
        else
            dprint btrfs check -p --repair --check-data-csum "$RW_DRIVE" && FS_OPTS="ssd,compress=lzo,discard,relatime"
            run_newroot btrfs check -p --repair --check-data-csum "$RW_DRIVE" && FS_OPTS="ssd,compress=lzo,discard,relatime"
            dprint fsck.ext4 -p "$RW_DRIVE" && FS_OPTS="discard,relatime"
            run_newroot fsck.ext4 -p "$RW_DRIVE" && FS_OPTS="discard,relatime"
        fi

        if [ -n "$FS_OPTS" ]; then

            dprint mount "$RW_DRIVE" "$F_RWPART" -o $FS_OPTS || oops
            mount "$RW_DRIVE" "$F_RWPART" -o $FS_OPTS || oops
            STORED=1
            echo "[STORED]"
        fi
    fi

    ################" AUTOMOUNT OVERLAYS
    if ls "$F_BOOT_ROOT"/env-*.sq 2>&1 >/dev/null ; then
        ENV_R="$F_BOOT_ROOT"
        mount -o remount,rw "$F_BOOT_ROOT"
    else
        ENV_R="$F_RWPART"
    fi

    if ls "$ENV_R"/env-*.sq 2>&1 >/dev/null ; then
        echo "Loading environments in $ENV_R"
        for env in "$ENV_R"/env-*.sq
        do
            name=${env##*/}
            n="$ENV_R/$name"
            echo "Preparing ENV::$name..."

            mkdir $n-mnt 2>/dev/null
            mount -v -t squashfs "$env" "${n}-mnt" -o loop
            cd "$n-mnt"
                for fname in * ; do
                    echo "- $fname"
                    # FIXME: make a single mount command to optimize multiple overlays
                    run_newroot mount -v -t overlay overlay "$R/$fname" -o "relatime,ro,lowerdir=$n-mnt/$fname:$R/$fname"
                done
            cd ..
        done
    fi
    ################ END " AUTOMOUNT OVERLAYS

	if [ $STORED -eq 0 ]; then # no storage = tmpfs root
	    echo "[VOLATILE]"
	    dprint mount -t tmpfs tmpfs "$F_RWPART"
	    mount -t tmpfs tmpfs "$F_RWPART"
	fi

    mv /tmp/*.log "$F_RWPART"

    if [ ! -d "$F_RWPART/ROOT" ]; then # populate if empty
        echo "populating storage with default config"
        run_newroot tar xf "$R/boot/rootfs.default" -C "$F_RWPART"
        sync
    fi
    # ensure overlay folders are created
    for d in home etc opt srv usr var_db var_lib; do
        if [ ! -d "$F_RWPART/ROOT/$d" ]; then
            mkdir -p "$F_RWPART/ROOT/$d"
            mkdir -p "$F_RWPART/WORK/$d"
        fi
    done

    # mount /etc to allow systemd to get updated config
    dprint mount -t overlay none "$R/etc" -o "relatime,lowerdir=$R/etc,upperdir=$R/storage/ROOT/etc,workdir=$R/storage/WORK/etc"
    mount -t overlay none "$R/etc" -o "relatime,lowerdir=$R/etc,upperdir=$R/storage/ROOT/etc,workdir=$R/storage/WORK/etc"

    # mount /usr to make systemd happy
    dprint mount -t overlay none "$R/usr" -o "relatime,lowerdir=$R/usr,upperdir=$R/storage/ROOT/usr,workdir=$R/storage/WORK/usr"
    mount -t overlay none "$R/usr" -o "relatime,lowerdir=$R/usr,upperdir=$R/storage/ROOT/usr,workdir=$R/storage/WORK/usr"

	# generate fstab
	T_F="$R/run/fstab"
	cat > /tmp/fstab <<EOF
/dev/loop0            /         squashfs ro,x-systemd.device-timeout=1m,relatime        0 0
$FULL_DISK_ID         /boot     vfat     rw,x-systemd.device-timeout=1m,relatime,fmask=0022,dmask=0022,shortname=mixed,errors=remount-ro        0 1
$S_RW_DRIVE           /storage  auto     rw,x-systemd.device-timeout=1m,relatime,discard,data=ordered     0 2
/storage/ROOT/home    /home     none     rw,x-systemd.device-timeout=60,relatime,discard,data=ordered,bind      0 2

none     /var/lib         overlay  rw,x-systemd.device-timeout=10,relatime,lowerdir=/var/lib,upperdir=/storage/ROOT/var_lib,workdir=/storage/WORK/var_lib    0 2
none     /var/db          overlay  rw,x-systemd.device-timeout=10,relatime,lowerdir=/var/db,upperdir=/storage/ROOT/var_db,workdir=/storage/WORK/var_db    0 2
none     /etc             overlay  rw,x-systemd.device-timeout=10,relatime,lowerdir=/etc,upperdir=/storage/ROOT/etc,workdir=/storage/WORK/etc     0 2
none     /opt             overlay  rw,x-systemd.device-timeout=10,relatime,lowerdir=/opt,upperdir=/storage/ROOT/opt,workdir=/storage/WORK/opt     0 2
none     /srv             overlay  rw,x-systemd.device-timeout=10,relatime,lowerdir=/srv,upperdir=/storage/ROOT/srv,workdir=/storage/WORK/srv     0 2
none     /usr             overlay  rw,x-systemd.device-timeout=10,relatime,lowerdir=/usr,upperdir=/storage/ROOT/usr,workdir=/storage/WORK/usr     0 2

tmpfs    /mnt            tmpfs   rw   0 2
tmpfs    /var/log        tmpfs    rw     0 2
tmpfs    /var/tmp        tmpfs    rw     0 2
tmpfs    /var/cache      tmpfs    rw     0 2

tmpfs          /home/user/.cache       tmpfs   noatime,nodev,nosuid,size=1000M 0       2
EOF
    cp /tmp/fstab $T_F

    [ -n "$shell" ] && ash -i #run_newroot sh -i # start a shell if requested
}

